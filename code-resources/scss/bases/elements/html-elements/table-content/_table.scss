// Tables
//
// Customizes the `.table` component with basic values, each used across all table variations.


table,
.table {
  @extend %table;
  @each $name, $color in $colors {
    .table-#{$name} {
      $text: color-contrast(opaque($body-color, $gray-200));
      $active-bg: mix($gray-200, $color, percentage(.10));
      $hover-bg: shift-color($active-bg, percentage(.75));
      $striped-bg: mix($gray-200, $color, percentage(.33));
      $border-color: mix($gray-800, $color, percentage($table-border-factor));

      --#{$prefix}table-color: #{$text};
      --#{$prefix}table-bg: #{$gray-200};
      --#{$prefix}table-border-color: #{$border-color};
      --#{$prefix}table-striped-bg: #{$striped-bg};
      --#{$prefix}table-striped-color: #{color-contrast($striped-bg)};
      --#{$prefix}table-active-bg: #{$active-bg};
      --#{$prefix}table-active-color: #{color-contrast($active-bg)};
      --#{$prefix}table-hover-bg: #{$hover-bg};
      --#{$prefix}table-hover-color: #{color-contrast($hover-bg)};

      color: $table-color;
      border-color: $table-border-color;
      // Target th & td
      // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
      // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
      // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
      // stylelint-disable-next-line selector-max-universal
      > :not(caption) > * > * {
        padding: $table-cell-offset-y $table-cell-offset-x;
        background-color: var(--#{$prefix}table-bg);
        border-bottom-width: $table-border-width;
        box-shadow: inset 0 0 0 9999px var(--#{$prefix}table-accent-bg);
      }
      > tbody {
        vertical-align: inherit;
      }

      > thead {
        vertical-align: bottom;
      }
      // Highlight border color between thead, tbody and tfoot.
      > :not(:first-child) {
        border-top: (2 * $table-border-width) solid $table-group-separator-color;
      }
    }
  }
}
// scss-docs-end table-variant

table tbody tr:nth-child(even) {
	background: tint($accent, 33%);
}

//
// Condensed table w/ half padding
//

.table-sm {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $table-cell-offset-y-sm $table-cell-offset-x-sm;
  }
}

// Border versions
//
// Add or remove borders all around the table and between all the columns.
//
// When borders are added on all sides of the cells, the corners can render odd when
// these borders do not have the same color or if they are semi-transparent.
// Therefor we add top and border bottoms to the `tr`s and left and right borders
// to the `td`s or `th`s

.table-bordered {
  > :not(caption) > * {
    border-width: $table-border-width 0;

    // stylelint-disable-next-line selector-max-universal
    > * {
      border-width: 0 $table-border-width;
    }
  }
}

.table-borderless {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    border-bottom-width: 0;
  }

  > :not(:first-child) {
    border-top-width: 0;
  }
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
  > tbody > tr:nth-of-type(#{$table-striped-order}) > * {
    --#{$prefix}table-accent-bg: var(--#{$prefix}table-striped-bg);
    color: var(--#{$prefix}table-striped-color);
  }
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.table-active {
  --#{$prefix}table-accent-bg: var(--#{$prefix}table-active-bg);
  color: var(--#{$prefix}table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
  > tbody > tr:hover > * {
    --#{$prefix}table-accent-bg: var(--#{$prefix}table-hover-bg);
    color: var(--#{$prefix}table-hover-color);
  }
}

// Table variants
//
// Table variants set the table cell backgrounds, border colors
// and the colors of the striped, hovered & active tables

//@each $color, $value in $table-variants {
//  @include table-variant($color, $value);
//}

// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-down($breakpoint) {
    .table-responsive#{$infix} {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}
